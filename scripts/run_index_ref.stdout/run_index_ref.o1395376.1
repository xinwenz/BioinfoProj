Settings:
  Output files: "ref/dmel6_ucsc.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  ref/dmel6_ucsc.fa
Reading reference sizes
  Time reading reference sizes: 00:10:30
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:01:52
bmax according to bmaxDivN setting: 35643256
Using parameters --bmax 26732442 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26732442 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:04
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 4; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.58414e+07 (target: 26732441)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (26732442) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 9586586 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 9586587 for bucket 1
Getting block 2 of 9
  Reserving size (26732442) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 25343097 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:13
Returning block of 25343098 for bucket 2
Getting block 3 of 9
  Reserving size (26732442) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 21928047 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:11
Returning block of 21928048 for bucket 3
Getting block 4 of 9
  Reserving size (26732442) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 6259416 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 6259417 for bucket 4
Getting block 5 of 9
  Reserving size (26732442) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 22000310 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:11
Returning block of 22000311 for bucket 5
Getting block 6 of 9
  Reserving size (26732442) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 9971407 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 9971408 for bucket 6
Getting block 7 of 9
  Reserving size (26732442) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 17229277 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:10
Returning block of 17229278 for bucket 7
Getting block 8 of 9
  Reserving size (26732442) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 15575386 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:08
Returning block of 15575387 for bucket 8
Getting block 9 of 9
  Reserving size (26732442) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 14679490 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:08
Returning block of 14679491 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 41351058
fchr[G]: 71311730
fchr[T]: 101240543
fchr[$]: 142573024
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 51791153 bytes to primary EBWT file: ref/dmel6_ucsc.1.bt2
Wrote 35643264 bytes to secondary EBWT file: ref/dmel6_ucsc.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 142573024
    bwtLen: 142573025
    sz: 35643256
    bwtSz: 35643257
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8910815
    offsSz: 35643260
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 742568
    numLines: 742568
    ebwtTotLen: 47524352
    ebwtTotSz: 47524352
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:16:33
Reading reference sizes
  Time reading reference sizes: 00:01:51
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:01:52
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 35643256
Using parameters --bmax 26732442 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 26732442 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:04
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:01
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.03676e+07 (target: 26732441)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (26732442) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 25610546 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 25610547 for bucket 1
Getting block 2 of 7
  Reserving size (26732442) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 6818174 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 6818175 for bucket 2
Getting block 3 of 7
  Reserving size (26732442) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 26249754 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 26249755 for bucket 3
Getting block 4 of 7
  Reserving size (26732442) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 24717248 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:13
Returning block of 24717249 for bucket 4
Getting block 5 of 7
  Reserving size (26732442) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 24981052 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:12
Returning block of 24981053 for bucket 5
Getting block 6 of 7
  Reserving size (26732442) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 23911466 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:13
Returning block of 23911467 for bucket 6
Getting block 7 of 7
  Reserving size (26732442) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 10284778 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 10284779 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 41351058
fchr[G]: 71311730
fchr[T]: 101240543
fchr[$]: 142573024
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 51791153 bytes to primary EBWT file: ref/dmel6_ucsc.rev.1.bt2
Wrote 35643264 bytes to secondary EBWT file: ref/dmel6_ucsc.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 142573024
    bwtLen: 142573025
    sz: 35643256
    bwtSz: 35643257
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 8910815
    offsSz: 35643260
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 742568
    numLines: 742568
    ebwtTotLen: 47524352
    ebwtTotSz: 47524352
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:08:40
